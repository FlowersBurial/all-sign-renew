name: 自动签到WeMC
on:
  push:
    branches:
      - main
  schedule:
    - cron: '34 12 * * *'  # 初始占位时间，每天 UTC 时间 22:00 运行
  workflow_dispatch:

permissions:
  contents: write
jobs:
  adjust-next-cron:
    if: github.event_name == 'schedule' # 仅在调度触发时运行
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Calculate next execution time (22h cooldown + random time)
      id: calculate-next-cron
      run: |
        # 获取当前时间（UTC）
        CURRENT_TIME=$(date -u +'%s')
        
        # 冷却时间为 22 小时（秒）
        COOL_DOWN_TIME=$((22 * 3600))
        
        # 随机时间范围为 22 到 30 小时之间（秒）
        RANDOM_EXTRA_TIME=$(( (22 + RANDOM % 9) * 3600 ))

        # 计算下一次的执行时间（当前时间 + 冷却期 + 随机时间）
        NEXT_TIME=$((CURRENT_TIME + COOL_DOWN_TIME + RANDOM_EXTRA_TIME))

        # 计算下一次的小时和分钟（UTC 时间）
        NEXT_HOUR=$(date -u -d "@$NEXT_TIME" +'%H')
        NEXT_MINUTE=$(date -u -d "@$NEXT_TIME" +'%M')

        echo "Next execution time: $NEXT_HOUR:$NEXT_MINUTE UTC"
        echo "next_cron=$NEXT_MINUTE $NEXT_HOUR * * *" >> $GITHUB_ENV

    - name: Update cron schedule
      run: |
        # 动态更新 cron 时间
        sed -i "s/cron: '.*'/cron: '${{ env.next_cron }}'/g" .github/workflows/wemc.yml
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git commit -am "Update cron to ${{ env.next_cron }}"
        git push

  read-and-access:
    if: github.event_name != 'schedule' # 执行实际任务
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: WeMC签到
      env:
        WEMC_USERPASSWD: ${{ secrets.WEMC_USERPASSWD }}
      run: |
        # 安装 EasyOCR 和其他依赖
        sudo apt update
        sudo apt install jq bc -y
        pip install easyocr
        
        # 读取用户密码
        IFS=',' read -r -a up <<< "$WEMC_USERPASSWD"
 
        for item in "${up[@]}"; do  
          IFS=':' read -r email password <<< "$item"  
          echo "正在签到前两位邮箱：${email:0:2}"
          
          # 登录
          curl -s -c 'wemc.ck' -X 'POST' 'https://wemc.cc/v1/auth/login/' -H 'content-type: application/json' -d "{\"email\":\"$email\",\"password\":\"$password\"}" | jq -r '.msg'
          
          # 获取验证码
          getcode_json=$(curl -s -b 'wemc.ck' 'https://wemc.cc/v1/user/sign/code/')
          echo $getcode_json
          
          # 提取 base64 编码的验证码并解码保存为图片
          codes=$(echo $getcode_json | jq -r '.data')
          pure_base64_str="${codes#*base64,}"  
          echo "$pure_base64_str" | base64 --decode > wemccode.png

          # 使用 EasyOCR 识别验证码
          python3 -c "
import easyocr
reader = easyocr.Reader(['en'])
result = reader.readtext('wemccode.png')
captcha_text = result[0][1]  # 获取识别的文本
print('识别的验证码内容：', captcha_text)
import re
captcha_text_cleaned = re.sub(r'[^0-9+\-*/=]', '', captcha_text)  # 清理非数学符号
print('清理后的验证码：', captcha_text_cleaned)
authcode = eval(captcha_text_cleaned)  # 计算验证码的结果
print('计算结果：', authcode)
with open('acode.txt', 'w') as f:
    f.write(str(authcode))
          "
          
          # 获取计算后的验证码
          acode=$(cat acode.txt)
          echo "计算出的验证码：$acode"
          
          # 提交签到请求
          msg=$(curl -s -b 'wemc.ck' "https://wemc.cc/v1/user/sign/?code=$acode" | jq -r '.msg')
          echo $msg
          
          # 如果验证码错误，重试
          if [ "$msg" == "验证码不正确" ]; then
            echo '验证码不正确，重新尝试'
            getcode_json=$(curl -s -b 'wemc.ck' 'https://wemc.cc/v1/user/sign/code/')
            echo $getcode_json
            codes=$(echo $getcode_json | jq -r '.data')
            pure_base64_str="${codes#*base64,}"  
            echo "$pure_base64_str" | base64 --decode > wemccode.png
            python3 -c "
import easyocr
reader = easyocr.Reader(['en'])
result = reader.readtext('wemccode.png')
captcha_text = result[0][1]  # 获取识别的文本
print('识别的验证码内容：', captcha_text)
import re
captcha_text_cleaned = re.sub(r'[^0-9+\-*/=]', '', captcha_text)  # 清理非数学符号
print('清理后的验证码：', captcha_text_cleaned)
authcode = eval(captcha_text_cleaned)  # 计算验证码的结果
print('计算结果：', authcode)
with open('acode.txt', 'w') as f:
    f.write(str(authcode))
            "
            acode=$(cat acode.txt)
            echo "计算出的验证码：$acode"
            curl -s -b 'wemc.ck' "https://wemc.cc/v1/user/sign/?code=$acode" | jq -r '.msg'
          fi

          # 清理临时文件
          rm -rf wemc.ck acode.txt wemccode.png
        done
